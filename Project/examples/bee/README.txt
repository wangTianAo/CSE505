    \'''/ //          BEE          / \_/ \_/ \
   -(|||)(')      README file      \_/ \_/ \_/
     ^^^         by Amit Metodi    / \_/ \_/ \
-------------------------------------------------

This archive file contains the distributed version of 
BEE and PL-SATsolver.

BEE (Ben-Gurion University Equi-propagation Encoder) is a compiler
which enables to encode finite domain constraint problems to CNF.
During compilation, BEE applies optimizations which include 
equi-propagation, partial-evaluation, and a careful selection of 
encoding techniques per constraint, depending on various parameters 
of the constraint.

BEE web-page: http://amit.metodi.me/research/bee/

PL-SATsolver is a Prolog interface to a SAT solver which is based 
on Prolog interface to the Minisat described in the paper: 
Logic Programming with Satisfiability; 
Michael Codish, Vitaly Lagoon and Peter Stuckey.

PL-SATsolver contains four MiniSAT based SAT solvers:
Minisat v2.0.2, CryptoMinisat v2.5.1, Glucose v2.2, and Glucose 4.0

PL-SATsolver web-page: http://amit.metodi.me/research/plsatsolver/



General Information
--------------------
BEE implementation was written and tested using SWI-Prolog 7.2.3.
Different releases of Prolog might perform differently and
cause some bugs.

SWI-Prolog website: http://www.swi-prolog.org/



BEE and PL-SATsolver:
---------------------
BEE is Prolog code and can easily integrated with your Prolog code
by import "beeCompiler/bCompiler.pl" module and use "bCompile" predicate
to compile list of constraints to CNF.
The CNF generated by BEE need to be solved by a SAT solver.
PL-SATsolver gives the ability to solve the generated CNF in the Prolog
framewrok, without the need exporting the CNF and use external SAT solver.
PL-SATsolver is used by import "satsolver/satsolver.pl" module
and use "sat" predicate (PL-SATsolver requires compilation !)
For more details about PL-SATsolver, please read 
"satsolver_src/ReadMe.txt" file.


BEE and CryptoMinisat:
----------------------
While BEE default settings generates a CNF, BEE can generate a CNF
containing XOR clauses which supported naitively by CryptoMinisat.
To encode XOR using a single XOR clause instead of a set of OR clauses,
set the following before consult BEE module:
:- nb_setval(bee_useXorClauses, true).



Examples for Usage:
-------------------
The folder "bApplications" contains several examples where Prolog is
used to generate the BEE model, compile to CNF, solve (using PL-SATsolver)
and verify the correctness of the result.

We recommand to start with the three examples in 'bApplications/1stExamples'
and than move to more complex examples.

For example, to run dnaWords do :
1. execute SWI-Prolog
   > swipl
2. consult dna words code:
   ?- ['bApplications/dnaWords/dnaWords'].
3. call the main predicate with the instance:
   ?- Instance=dna(14,8), dnaWords(Instance,Solution).